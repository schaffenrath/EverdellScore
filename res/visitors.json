{
    "bimlittle": {
        getPoints: (player) => player.findCountType(TYPES.destination) >= 6 ? 7 : 0
    },
    "bosleytedwardson": {
        getPoints: (player) => Object.keys(TYPES).reduce((prev, val) => prev && player.findCountType(TYPES[val
        ]) >= 2, true) ? 9 : 0
    },
    "butterbellsweetpaw": {
        getPoints: (player) => player.town.length >= 15 ? 6 : 0
    },
    "diggsdeepwell": {
        getPoints: (player) => player.leftResources[RESOURCES.pebble
        ] >= 2 ? 6 : 0
    },
    "cillweedquicksniff": {
        getPoints: (player) => player.findCountKind(KINDS.building) > player.findCountKind(KINDS.critter) ? 5 : 0
    },
    "dimdustlight": {
        getPoints: (player) => player.findCountRarity(RARITY.unique) >= 6 ? 5 : 0
    },
    "dipdibble": {
        getPoints: (player) => player.findCountType(TYPES.destination) >= 4 ? 5 : 0
    },
    "dunetarrington": {
        getPoints: (player) => player.findCountType(TYPES.prosperity) >= 6 ? 6 : 0
    },
    "dwellnorthwatch": {
        getPoints: (player) => player.findCountType(TYPES.traveler) >= 4 ? 5 : 0
    },
    "edvardtriptail": {
        getPoints: (player) => Object.keys(TYPES).reduce((prev, val) => prev && player.findCountType(TYPES[val
        ]) >= 1, true) ? 5 : 0
    },
    "frinstickly": {
        getPoints: (player) => player.leftResources[RESOURCES.resin
        ] >= 4 ? 6 : 0
    },
    "glindilfrink": {
        getPoints: (player) => player.findCountType(TYPES.prosperity) >= 4 ? 4 : 0
    },
    "iggysilverscale": {
        getPoints: (player) => player.findCountType(TYPES.traveler) >= 6 ? 7 : 0
    },
    "mossysteptoe": {
        getPoints: (player) => player.findCountType(TYPES.production) >= 5 ? 5 : 0
    },
    "orinnimblepaw": {
      getPoints: (player) => player.journeys.length >= 2 ? 6 : 0
    },
    "oscarlongtale": {
        getPoints: (player) => player.findCountKind(KINDS.critter) > player.findCountKind(KINDS.building) ? 5 : 0
    },
    "phillgurgle": {
        getPoints: (player) => player.findCountType(TYPES.production) <= 2 ? 10 : 0
    },
    "piffquillglow": {
        getPoints: (player) => player.leftResources[RESOURCES.twig
        ] >= 5 ? 6 : 0
    },
    "plumshortclaw": {
        getPoints: (player) => player.findCountType(TYPES.governance) >= 4 ? 5 : 0
    },
    "quinncleanwhisker": {
        getPoints: (player) => player.findCountKind(KINDS.critter) >= 6 && player.findCountKind(KINDS.building) >= 6 ? 6 : 0
    },
    "reemysniggle": {
        getPoints: (player) => player.basicEvents.length >= 3 ? 7 : 0
    },
    "rivilablacus": {
        getPoints: (player) => player.findCountType(TYPES.governance) >= 6 ? 7 : 0
    },
    "rubydew": {
        getPoints: (player) => player.specialEvents.length >= 2 ? 8 : 0
    },
    "sarisclearwhistle": {
        getPoints: (player) => player.findCountRarity(RARITY.common) >= 6 ? 5 : 0
    },
    "sirtrivleqsmarqwill": {
        getPoints: (player) => player.leftResources[RESOURCES.twig
        ] >= 1 && player.leftResources[RESOURCES.resin
        ] >= 1 && player.leftResources[RESOURCES.pebble
        ] >= 1 && player.leftResources[RESOURCES.berry
        ] >= 1  ? 7 : 0
    },
    "skidshinysnout": {
        getPoints: (player) => player.points >= 10 ? 5 : 0
    },
    "snoutpuddlehop": {
        getPoints: (player) => player.specialEvents.length >= 1 && player.basicEvents.length >= 2 ? 8 : 0
    },
    "trisspeske": {
        getPoints: (player) => {
            let overview = player.getTownOverview();
            return Object.keys(overview).reduce(
                (prev, type) => prev || (type != TYPES.production && overview[type
            ] >= 6),
                false) ? 6 : 0;
        }
    },
    "wildellfamily": {
        getPoints: (player) => player.findCountRarity(RARITY.common) >= 9 ? 7 : 0
    },
    "willowgreengrin": {
        getPoints: (player) => player.findCountType(TYPES.production) >= 7 ? 7 : 0
    },
    "wimblewuffle": {
        getPoints: (player) => player.leftResources[RESOURCES.berry
        ] >= 3 ? 6 : 0
    },
    "yarabrunmayberry": {
        getPoints: (player) => player.findCountRarity(RARITY.unique) >= 7 ? 7 : 0
    }
}